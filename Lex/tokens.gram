"""
from Basic import *

def check_keyword(a):
    if a.text in Token.keywords:
        a.kind=Token.keywords[a.text]
    return a

def check_punctuator(a):
    return Token(Token.punctuator[a[1]],a[0],a[1])
"""

start:
    token

token:
    string_literal {Token(TokenKind.STRINGLITERAL,location,text)}
    | identifier {check_keyword(Token(TokenKind.IDENTIFIER,location,text))}
    | constant
    | punctuator
    | "" {Token(TokenKind.END,location,text)}

identifier:
    identifier identifier_continue
    | identifier_start

identifier_start:
    nondigit
    | universal_character_name
    | other_identifier_start

identifier_continue:
    digit
    | nondigit
    | universal_character_name
    | other_identifier_continue

nondigit:
    "_"|"a"|"b"|"c"|"d"|"e"|"f"|"g"|"h"|"i"|"j"|"k"|"l"|"m"
    |"n"|"o"|"p"|"q"|"r"|"s"|"t"|"u"|"v"|"w"|"x"|"y"|"z"
    |"A"|"B"|"C"|"D"|"E"|"F"|"G"|"H"|"I"|"J"|"K"|"L"|"M"
    |"N"|"O"|"P"|"Q"|"R"|"S"|"T"|"U"|"V"|"W"|"X"|"Y"|"Z"

universal_character_name:
    "\\" "u" hex_quad
    | "\\" "U" hex_quad hex_quad

hex_quad:
    hexadecimal_digit hexadecimal_digit hexadecimal_digit hexadecimal_digit

constant:
    floating_constant {Token(TokenKind.FLOATCONST,location,text)}
    | integer_constant {Token(TokenKind.INTCONST,location,text)}
    | character_constant {Token(TokenKind.CHARCONST,location,text)}

integer_constant:
    hexadecimal_constant [integer_suffix]
    | binary_constant [integer_suffix]
    | octal_constant [integer_suffix]
    | decimal_constant [integer_suffix]

decimal_constant:
    decimal_constant ["'"] digit
    | nonzero_digit

octal_constant:
    octal_constant ["'"] octal_digit
    | "0"

hexadecimal_constant:
    hexadecimal_prefix hexadecimal_digit_sequence

binary_constant:
    binary_constant ["'"] binary_digit
    | binary_prefix binary_digit

hexadecimal_prefix:
    "0" "x"
    | "0" "X"

binary_prefix:
    "0" "b"
    | "0" "B"

hexadecimal_digit_sequence:
    hexadecimal_digit_sequence ["'"] hexadecimal_digit
    | hexadecimal_digit

binary_digit:
    "0"
    | "1"

hexadecimal_digit:
    "0" | "1"  | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
    | "a" | "b" | "c" | "d" | "e" | "f"
    | "A" | "B" | "C" | "D" | "E" | "F"

octal_digit:
    "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7"

nonzero_digit:
    "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

digit:
    "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

integer_suffix:
    unsigned_suffix long_long_suffix
    | unsigned_suffix [long_suffix]
    | unsigned_suffix bit_precise_int_suffix
    | long_long_suffix [unsigned_suffix]
    | long_suffix [unsigned_suffix]
    | bit_precise_int_suffix [unsigned_suffix]

bit_precise_int_suffix:
    "w" "b"
    | "W" "B"

long_long_suffix:
    "l" "l"
    | "L" "L"

long_suffix:
    "l"
    | "L"

unsigned_suffix:
    "u"
    | "U"

floating_constant:
    hexadecimal_floating_constant
    | decimal_floating_constant

decimal_floating_constant:
    fractional_constant [exponent_part] [floating_suffix]
    | digit_sequence exponent_part [floating_suffix]

hexadecimal_floating_constant:
    hexadecimal_prefix hexadecimal_fractional_constant binary_exponent_part [floating_suffix]
    | hexadecimal_prefix hexadecimal_digit_sequence binary_exponent_part [floating_suffix]

fractional_constant:
    [digit_sequence] "." digit_sequence
    | digit_sequence "."

exponent_part:
    "e" [sign] digit_sequence
    | "E" [sign] digit_sequence

sign:
    "+"
    | "-"

digit_sequence:
    digit_sequence ["'"] digit
    | digit

hexadecimal_fractional_constant:
    [hexadecimal_digit_sequence] "." hexadecimal_digit_sequence
    | hexadecimal_digit_sequence "."

binary_exponent_part:
    "p" [sign] digit_sequence
    | "P" [sign] digit_sequence

floating_suffix:
    "d" "f"
    | "d" "d"
    | "d" "l"
    | "D" "F"
    | "D" "D"
    | "D" "L"
    | "f"
    | "l"
    | "F"
    | "L"

character_constant:
    [encoding_prefix] "'" c_char_sequence "'"

encoding_prefix:
    "u" "8"
    | "u"
    | "U"
    | "L"

c_char_sequence:
    c_char_sequence c_char
    | c_char

c_char:
    escape_sequence
    | other_c_char

escape_sequence:
    octal_escape_sequence
    | hexadecimal_escape_sequence
    | universal_character_name
    | simple_escape_sequence

simple_escape_sequence:
    "\\" "'"
    | "\\" "\""
    | "\\" "?"
    | "\\" "\\"
    | "\\" "a"
    | "\\" "b"
    | "\\" "f"
    | "\\" "n"
    | "\\" "r"
    | "\\" "t"
    | "\\" "v"
    | "\\" {ERROR("未知的转义字符",location)}

octal_escape_sequence:
    "\\" octal_digit octal_digit octal_digit
    | "\\" octal_digit octal_digit
    | "\\" octal_digit

hexadecimal_escape_sequence:
    hexadecimal_escape_sequence hexadecimal_digit
    | "\\" "x" hexadecimal_digit

string_literal:
    [encoding_prefix] "\"" [s_char_sequence] "\""
    | [encoding_prefix] "\"" [s_char_sequence] {ERROR("字符串未终止",location)}

s_char_sequence:
    s_char_sequence s_char
    | s_char

s_char:
    escape_sequence
    | other_s_char

punctuator:
    "." "." "." {check_punctuator((location,text))}
    | "<" "<" "=" {check_punctuator((location,text))}
    | ">" ">" "=" {check_punctuator((location,text))}
    | "-" ">" {check_punctuator((location,text))}
    | "+" "+" {check_punctuator((location,text))}
    | "-" "-" {check_punctuator((location,text))}
    | "<" "<" {check_punctuator((location,text))}
    | ">" ">" {check_punctuator((location,text))}
    | "<" "=" {check_punctuator((location,text))}
    | ">" "=" {check_punctuator((location,text))}
    | "=" "=" {check_punctuator((location,text))}
    | "!" "=" {check_punctuator((location,text))}
    | "&" "&" {check_punctuator((location,text))}
    | "|" "|" {check_punctuator((location,text))}
    | ":" ":" {check_punctuator((location,text))}
    | "*" "=" {check_punctuator((location,text))}
    | "/" "=" {check_punctuator((location,text))}
    | "%" "=" {check_punctuator((location,text))}
    | "+" "=" {check_punctuator((location,text))}
    | "-" "=" {check_punctuator((location,text))}
    | "&" "=" {check_punctuator((location,text))}
    | "^" "=" {check_punctuator((location,text))}
    | "|" "=" {check_punctuator((location,text))}
    | "#" "#" {check_punctuator((location,text))}
    | "[" {check_punctuator((location,text))}
    | "]" {check_punctuator((location,text))}
    | "(" {check_punctuator((location,text))}
    | ")" {check_punctuator((location,text))}
    | "{" {check_punctuator((location,text))}
    | "}" {check_punctuator((location,text))}
    | "." {check_punctuator((location,text))}
    | "&" {check_punctuator((location,text))}
    | "*" {check_punctuator((location,text))}
    | "+" {check_punctuator((location,text))}
    | "-" {check_punctuator((location,text))}
    | "~" {check_punctuator((location,text))}
    | "!" {check_punctuator((location,text))}
    | "/" {check_punctuator((location,text))}
    | "%" {check_punctuator((location,text))}
    | "<" {check_punctuator((location,text))}
    | ">" {check_punctuator((location,text))}
    | "^" {check_punctuator((location,text))}
    | "|" {check_punctuator((location,text))}
    | "?" {check_punctuator((location,text))}
    | ":" {check_punctuator((location,text))}
    | ";" {check_punctuator((location,text))}
    | "=" {check_punctuator((location,text))}
    | "," {check_punctuator((location,text))}
    | "#" {check_punctuator((location,text))}
