"""
from basic import *
from basic import *

def unpack_header_rule(a):
    header=""
    rule=[]
    for i in a:
        rule.append(i[0])
        if i[1]!=None:
            header+=i[1].content
    return {
        "header":header,
        "rules":rule
    }
"""

start:
    a=grammar end {a}

grammar:
    rules {Grammar(**unpack_header_rule(rules),location=BEGIN_LOCATION)}

rules:
    rules [header] rule {rules+[(rule,header)]}
    | [header] rule {[(rule,header)]}

rule:
    a=identifier ":" b=[rhs] {Rule(name=a.text, rhs=b, location=BEGIN_LOCATION)}

rhs:
    alts {Rhs(alts=alts, location=BEGIN_LOCATION)}

alts:
    alts "|" alt {alts+[alt]}
    | alt {[alt]}

alt:
    items [action] {Alt(items=items, location=BEGIN_LOCATION,action=action.content if action!=None else None)}

items:
    items item {items+[item]}
    | item {[item]}

item:
    named_item

named_item:
    a=identifier "=" b=opt_item {NamedItem(name=a.text, item=b, location=a.location)}
    | opt_item

opt_item:
    a="[" b=leaf_item "]" {Option(item=b, location=a.location)}
    | leaf_item

leaf_item:
    a=identifier {NameLeaf(name=a.text, location=a.location)}
    | a=string_literal {StringLeaf(value=a.content, location=a.location)}

#include "builder_error.gram"
